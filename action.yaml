---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: "🔍 GitHub Action/Workflow Linter"
description: "Linter for validating GitHub workflow/action calls"
author: "The Linux Foundation"

inputs:
  path:
    description: "Path to scan for workflows (default: current directory)"
    required: false
    default: "."
  config-file:
    description: "Path to configuration file"
    required: false
  log-level:
    description: "Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)"
    required: false
    default: "INFO"
  output-format:
    description: "Output format (text, json)"
    required: false
    default: "text"
  fail-on-error:
    description: "Exit with error code if validation failures found"
    required: false
    default: "true"
  parallel:
    description: "Enable parallel processing"
    required: false
    default: "true"
  workers:
    description: "Number of parallel workers (1-32)"
    required: false
    default: "4"
  exclude:
    description: "Comma-separated patterns to exclude from scanning"
    required: false
  require-pinned-sha:
    description: "Require action calls to be pinned to commit SHAs"
    required: false
    default: "true"
  skip-actions:
    description: "Skip scanning action.yaml/action.yml files"
    required: false
    default: "false"
  validation-method:
    description: "Validation method (github-api, git, or auto-detect)"
    required: false

outputs:
  errors-found:
    description: "Number of validation errors found"
    value: ${{ steps.gha-workflow-linter.outputs.errors-found }}
  total-calls:
    description: "Total number of action calls scanned"
    value: ${{ steps.gha-workflow-linter.outputs.total-calls }}
  scan-summary:
    description: "JSON summary of scan results"
    value: ${{ steps.gha-workflow-linter.outputs.scan-summary }}

runs:
  using: "composite"
  steps:
    - name: "Setup Python"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5.3.0
      with:
        python-version: "3.11"

    - name: "Install uv"
      # yamllint disable-line rule:line-length
      uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7.1.2
      with:
        enable-cache: true

    - name: "Install gha-workflow-linter (if local)"
      shell: bash
      run: |
        if [[ -f "${{ github.action_path }}/pyproject.toml" ]]; then
          # Install from local source when running from the action repository
          echo "Installing gha-workflow-linter from local source..."
          cd "${{ github.action_path }}"
          uv pip install --system -e .
          echo "USE_UVX=false" >> "$GITHUB_ENV"
        else
          # When used as external action, we'll use uvx to run latest from PyPI
          echo "Will use uvx to run latest gha-workflow-linter from PyPI..."
          echo "USE_UVX=true" >> "$GITHUB_ENV"
        fi

    - name: "Run gha-workflow-linter"
      id: gha-workflow-linter
      shell: bash
      run: |
        # Determine command prefix (uvx for PyPI, direct for local)
        if [[ "$USE_UVX" == "true" ]]; then
          cmd_prefix="uvx --from gha-workflow-linter gha-workflow-linter"
        else
          cmd_prefix="gha-workflow-linter"
        fi

        # Build command arguments
        args=("${{ inputs.path }}")

        if [[ -n "${{ inputs.config-file }}" ]]; then
          args+=(--config "${{ inputs.config-file }}")
        fi

        if [[ -n "${{ inputs.log-level }}" ]]; then
          args+=(--log-level "${{ inputs.log-level }}")
        fi

        if [[ -n "${{ inputs.output-format }}" ]]; then
          args+=(--format "${{ inputs.output-format }}")
        fi

        if [[ "${{ inputs.fail-on-error }}" == "false" ]]; then
          args+=(--no-fail-on-error)
        fi

        if [[ "${{ inputs.parallel }}" == "false" ]]; then
          args+=(--no-parallel)
        fi

        if [[ -n "${{ inputs.workers }}" ]]; then
          args+=(--workers "${{ inputs.workers }}")
        fi

        if [[ -n "${{ inputs.exclude }}" ]]; then
          IFS=',' read -ra EXCLUDES <<< "${{ inputs.exclude }}"
          for exclude in "${EXCLUDES[@]}"; do
            args+=(--exclude "$exclude")
          done
        fi

        if [[ "${{ inputs.require-pinned-sha }}" == "false" ]]; then
          args+=(--no-require-pinned-sha)
        fi

        if [[ "${{ inputs.skip-actions }}" == "true" ]]; then
          args+=(--skip-actions)
        fi

        if [[ -n "${{ inputs.validation-method }}" ]]; then
          args+=(--validation-method "${{ inputs.validation-method }}")
        fi

        # Run gha-workflow-linter and capture output
        if [[ "${{ inputs.output-format }}" == "json" ]]; then
          output=$($cmd_prefix lint "${args[@]}" --no-cache)
          echo "scan-summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          # Extract error count from JSON
          errors_found=$(echo "$output" | \
            jq -r '.validation_summary.total_errors // 0')
          total_calls=$(echo "$output" | \
            jq -r '.scan_summary.total_calls // 0')
        else
          # For text output, run twice, once for display and again for JSON
          $cmd_prefix lint "${args[@]}" --no-cache
          exit_code=$?

          # Get JSON data for outputs - rebuild args with --format json
          json_args=("${args[0]}")  # Keep the path
          json_args+=(--format json)

          # Add all other args except format-related ones
          for arg in "${args[@]:1}"; do
            if [[ "$arg" != "--format" && "$arg" != "text" ]]; then
              json_args+=("$arg")
            fi
          done

          json_output=$($cmd_prefix lint "${json_args[@]}" --no-cache \
            2>/dev/null || echo '{}')

          errors_found=$(echo "$json_output" | \
            jq -r '.validation_summary.total_errors // 0' \
              2>/dev/null || echo "0")
          total_calls=$(echo "$json_output" | \
            jq -r '.scan_summary.total_calls // 0' 2>/dev/null || echo "0")

          echo "scan-summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "$json_output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        fi

        echo "errors-found=$errors_found" >> "$GITHUB_OUTPUT"
        echo "total-calls=$total_calls" >> "$GITHUB_OUTPUT"

        # Set step summary
        if [[ "$errors_found" -eq 0 ]]; then
          echo "✅ All $total_calls action calls are valid!" \
            >> "$GITHUB_STEP_SUMMARY"
        else
          echo "❌ Found $errors_found validation errors out of $total_calls" \
          >> "$GITHUB_STEP_SUMMARY"
        fi

branding:
  icon: "shield"
  color: "blue"
